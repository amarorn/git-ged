Structure
- repo layout
- library
- commands

Bootstrapping
- integrate OptionParser (stdlib) and subcommand (gem) into git-ged commands
- patch gem-man to read README{,.md} in lieu of any explicit manpage (gem man rib)

- create licenses subdir with data licenses by short-name
- create templates area that refs/heads/master can be populated from during "git ged init"
- create git-ged command that invokes git-ged-*
- create lib/git-ged/init.rb that invokes git init + template population (normal or bare)
- create lib/git-ged/ingest.rb that copies a GEDCOM in and assigns permaname (refs/local/gedcoms)
- ingest one of Hannah's small GEDCOMs
- ingest one of Hannah's full GEDCOMs
- get rib-git-ged plugin working

- create living filter pipe for filtering GEDCOMs
- create lib/git-ged/import.rb that copies a GEDCOM from refs/{local=>heads}/gedcoms with living filter
- create person/family permaname generation strategies (_UUID or name/birth/death, parent permanames)
- create entity permaname+state link logic
- create lib/git-ged/import-person.rb that copies refs/heads/{gedcoms=>persons} (with living filter)
- create lib/git-ged/import-family.rb that copies refs/heads/{gedcoms=>families} (with living filter)
- import one of Hannah's GEDCOMs

- populate person/family => gedcom permaname+state links
- create ingest logic for dealing with the second ingest/import cycle on the same GEDCOM
  - pick default person/family permaname generation logic based on whether the _UUIDs match up
  - create local/gedcoms history based on 


GUI:
  shoes
EXE:
  ocra
  shoes (for GUIs)
Tools:
  differ (ruby) for string diffs, edit distance style
  datadiff (perl) annotated diff
  datadiff (python) patch production

