GITGED CONCEPTS
===============

1) Gedcom
- all imported gedcoms are stored verbatim under a "refs/heads/gedcoms/{permaname}" ref
- permaname for gedcom is the sha256 hash of the string "<email> <path/filename>"
- subsequent imports of the same gedcom create new commits under the permaname ref
- keep your email, paths & filenames consistent to maximize permaname collisions

2) Person
- all imported persons are stored in standard JSON format under a "refs/heads/persons/{permaname}" ref
- permaname for person is the sha256 hash of the gedcom UID, or the sha256 hash of "<displayname>[ birthdate][ deathdate]"
- although person permaname should remain largely constant, it can change for reasons of disambiguation
- includes optional "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes
  - each of these link attributes refers to another person permaname+state reference
  - the "derived-from", "supersedes", and "superseded-by" link attributes allow for proper history-aware
    linkage across permanames for tracing complicated person record derivation
  - the "same-as" attribute is a loose identity link to an alternate history of a person
    determined to be the same historical person, it is a hint that a merge may be useful in the future
  - if the "not-same-as" attribute refers to a disconnected history of a *different* person under the same permaname,
    it is best to change the permaname of the person this attribute is added to
- person merge is often not needed if the persons originated unchanged from the same gedcom
- person merge is often a "comes before/comes after" decision at import time
- person merge decisions can be deferred by storing two person entities under the same permaname
  and letting the user make the before/after decision at a later time
- multiple persons can be stored under the same permaname under 'entity1'..'entityN' blob names

3) Family
- direct represenation of the family concept
- permaname for family is the sha256 hash of the parents' permaname(s) in alphanumeric order
- permaname should change if the parents' permanames are modified, or if a parent is replaced with a different person
- includes person links for each person in each family position
- includes optional "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes (like person)
- family merge is often not needed if the family originated unchanged from the same gedcom
- family merge can be a "comes before/comes after" decision at import time, but is not as likely as person to fit this workflow
- family merge decisions can be deferred by storing two family entities under the same permaname
  and letting the user make the before/after decision at a later time
- multiple families can be stored under the same permaname under 'entity1'..'entityN' blob names

??? Temporal aspects of relationships

4) Link Attribute
- link attributes always refer to BOTH permaname & state
- link attributes are encoded as XFN to start


GITGED REFS LAYOUT
==================

refs/heads/*:
- stuff that can be cloned/forked
refs/local/*:
- dispensible stuff that is used for local import actions (not needed for collaboration)

refs/heads/master (non-mergeable):
- README: simple documentation of gitged, with pointer to software to parse/use
- META: last version of gitged that wrote; last intent; list of gedcom permanames; last 100 edits performed

refs/heads/intents/{permaname}:
- INTENT: stores the user's identity, intent message, and date in the tree itself to capture "why"
- MUST exist: if no intent is explicitly stored, import/edit must stub one in that describes the largest-scope action being taken
- able to be as fine-grained and meticulous as the user wants to be, while allowing the user
  the convenience of keeping the same intent over several small actions moving toward a large-time-scale goal
- able to generate a feed of intents from here

refs/heads/gedcoms/{permaname}:
- gedcom.ged: the raw gedcom file renamed to a standard filename
- META: link to intent; original file name & path; where/who the file came from

refs/heads/persons/{permaname}:
- entity1: the primary person in standard JSON form
- entityN: alternate, not-yet-merged person records
- entityX.{format}: the primary person (or an alternate) in an alternate format
- META: link to intent; link(s) to gedcom permanames
- IDENTITY: optional "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes; also any arbitrary XFNs to other permanames
- commits on a person can easily be merged/fast-forwarded if history is shared and there are no textual conflicts
- commits on two persons of the same permaname that do NOT share history can undergo person merge
- merge commits set "supersedes" and "superseded-by" link attributes to allow post-merge traceability
- merge comes in at least 5 flavors:
  1) [import] full record reconciliation + history linkage at once (not recommended because intent is lost)
  2) [import] alternate record storage + history linkage (recommended for automated import processes)
  3) [post-import] "comes before/comes after" record replacement strategy for dealing with record reconciliation
  4) [post-import] "pick correct values" record reconciliation strategy for dealing with partial truth from multiple sources
  5) [post-import] "disambiguation" record reconciliation strategy for separating records that are NOT the same person (sets the "derived-from" attribute)
- merging of META takes a "most recent intent / union" approach
- merging of IDENTITY takes a "union with conflict detection & manual resolution" approach

refs/heads/families/{permaname}:
- entity1: the primary family in standard JSON form
- entityN: alternate, not-yet-merged family records
- entityX.{format}: the primary person (or an alternate) in an alternate format
- META: link to intent; link(s) to gedcom permanames
- IDENTITY: optional "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes; also any arbitrary XFNs to other permanames
- commits on a family can easily be merged/fast-forwarded if history is shared and there are no textual conflicts
- commits on two families of the same permaname that do NOT share history can undergo family merge
- merge comes in as many flavors as person merge (see person, draw corollaries for family)
- merging of META takes a "most recent intent / union" approach
- merging of IDENTITY takes a "union with conflict detection & manual resolution" approach


GG REPO STRUCTURE
=================

This is an illustration of what a GenesisGraphs container looks like.

A GenesisGraphs container has the following kinds of entities in it:
- Repository: one-per-app, refers to projects
- Project: refers to local and remote working sets associated with the project
- Working Set: maps entity permanames to current state SHAs
- Entity: just a plain entity, history under a permaname
- Commit: just an author, committer, and message (referred to by all others)

Because this is an approximation using git, there are a few differences
between this illustration and what a GG container would actually look like:
- GG commits are approximated by just using plain old git commit metadata

There are two working sets:
- working-set-default: several entity changes recorded
- working-set-scoped-down: no entity change, only removing an entity from scope

Raw entities are approximated using git branches with names that are really
permanames that look like "urn.gg.pn..." and have the entity state in a
single file at the root of the git tree.
