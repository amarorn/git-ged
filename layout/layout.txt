GIT-GED CONCEPTS
================

1) Gedcom
- all ingested gedcoms are stored verbatim under a "refs/local/gedcoms/{permaname}" ref
- all imported, living-filtered gedcoms are stored under a "refs/heads/gedcoms/{permaname}" ref
- permaname for gedcom is the sha256 hash of the string "<email> <path/filename>"
- subsequent imports of the same gedcom create new commits under the permaname ref
- keep your email, paths & filenames consistent to maximize permaname collisions
- copies the repo's LICENSE_DEFAULT unless overridden by the user at ingest time

2) Person
- all imported persons are stored in standard JSON format under a "refs/heads/persons/{permaname}" ref
- permaname for person is the sha256 hash of the gedcom UID, or the sha256 hash of "<displayname>[ birthdate][ deathdate]"
- although person permaname should remain largely constant, it can change for reasons of disambiguation
- proper protection of living data
  - all imported persons must be deceased and publicly-viewable, or the record will initially exist under the "refs/local/persons/..." refspace
  - import is responsible for initially segmenting living vs. deceased, but after import the app is responsible for calculating living after edit and moving the record if necessary
  - the same living check & segmentation logic that import uses will be available on-demand for apps to use after edit
  - when a deceased record is made living, the deceased record's permaname gets a new commit that marks it as no-longer-visible (so that on subsequent fetch, other repositories can delete their records)
- includes optional "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes
  - each of these link attributes refers to another person permaname+state reference
  - the "derived-from", "supersedes", and "superseded-by" link attributes allow for proper history-aware
    linkage across permanames for tracing complicated person record derivation
  - the "same-as" attribute is a loose identity link to an alternate history of a person
    determined to be the same historical person, it is a hint that a merge may be useful in the future
  - if the "not-same-as" attribute refers to a disconnected history of a *different* person under the same permaname,
    it is best to change the permaname of the person this attribute is added to
- person merge is often not needed if the persons originated unchanged from the same gedcom
- person merge is often a "comes before/comes after" decision at import time
- person merge decisions can be deferred by storing two person entities under the same permaname
  and letting the user make the before/after decision at a later time
- multiple persons can be stored under the same permaname under 'entity1'..'entityN' blob names
- copies the gedcom LICENSE if imported, copies the repo's LICENSE_DEFAULT if a newly-created person

3) Family
- direct represenation of the family concept
- permaname for family is the sha256 hash of the parents' permaname(s) in alphanumeric order
- permaname should change if the parents' permanames are modified, or if a parent is replaced with a different person
- includes person links for each person in each family position
- includes optional "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes (like person)
- includes optional "prior-family" link attribute that tracks temporal household dissolution & recomposition
- family merge is often not needed if the family originated unchanged from the same gedcom
- family merge can be a "comes before/comes after" decision at import time, but is not as likely as person to fit this workflow
- family merge decisions can be deferred by storing two family entities under the same permaname
  and letting the user make the before/after decision at a later time
- multiple families can be stored under the same permaname under 'entity1'..'entityN' blob names
- copies the gedcom LICENSE if imported, copies the repo's LICENSE_DEFAULT if a newly-created record

4) Link Attribute
- link attributes always refer to BOTH permaname & state
- link attributes are encoded as XFN to start

5) Init, Ingest, Import, Fetch, Clone
- Init: populates refs/heads/master with LICENSE_DEFAULT, README, etc. as specified by user
- Ingest: populates refs/local/gedcoms/{permaname} with a raw gedcom
- Import: performs living filter and populates refs/heads/gedcoms/{permaname}, along with creating any new persons/families
- Fetch: same as git fetch, except that only permanames that the user currently has are fetched (along with refs/heads/master)
- Clone: same as git clone

6) Data License
- Data license defaults to Creative Commons Share-alike
- Users can change license at repo/gedcom/record level
- Other common license options are easily specifiable

7) Deletion of Records
- person/family/gedcom delete comes in three flavors:
  - "deref": I no longer care to track or maintain this person, if anyone has this person cloned, let them continue to maintain the record
  - "hide": I want the record gone on any repo that follows mine, if they fetch from me, make their record go away, dead-to-living transition uses this mechanism
  - "delete": I want the record gone on any repo that follows mine, if they fetch from me, make their record go away
- "hide" and "delete" stubs hang around for a limited amount of time, and there is a mechanism that automatically cleans them up every so often
- "hide" stubs have a shorter time-to-live threshold than "delete" stubs


GIT-GED REFS LAYOUT
===================

refs/heads/*:
- stuff that can be cloned/forked
refs/local/*:
- dispensible stuff that is used for local import actions (not needed for collaboration)
- hidden stuff that should not be published on a clone/fork

refs/heads/master (fetchable, but non-mergeable):
- README: simple documentation of git-ged, with pointer to software to parse/use
- META: last version of git-ged that wrote; link to last intent; links to various person roots
- ENTITIES: list of gedcom/person/family permanames+state links, may end up needing to be sharded for very large repos
- LICENSE_DEFAULT: default license for any new records added or imported into to this repository, defaults to Creative Commons Share-alike
- [non-versioned] CHANGELOG: contains last 100 edits performed, updated by git-ged commit

refs/heads/intents/{permaname}:
- INTENT: stores the user's identity, intent message, and date in the tree itself to capture "why"
- MUST exist: if no intent is explicitly stored, import/edit must stub one in that describes the largest-scope action being taken
- able to be as fine-grained and meticulous as the user wants to be, while allowing the user
  the convenience of keeping the same intent over several small actions moving toward a large-time-scale goal
- able to generate a feed of intents from here

refs/heads/gedcoms/{permaname}:
- gedcom.ged: the living-filtered gedcom file renamed to a standard filename
- contains no living data, as a result of "ingest" followed by "import"
- META: link to intent; original file name & path; where/who the file came from
- LICENSE: license for use of this gedcom as a whole, copied to individual persons/families at import time

refs/local/gedcoms/{permaname}:
- *may* contain living data, populated by "ingest"
- if the gedcom contains no living data, "import" can delete 
- can coexist with refs/heads/gedcoms/{permaname} for a while as documentation of exactly what got imported
- fetch/clone/fork does NOT include the original gedcom, just the "post-import" one

refs/heads/persons/{permaname}:
- entity1: the primary person in standard JSON form
- entityN: alternate, not-yet-merged person records
- entityX.{format}: the primary person (or an alternate) in an alternate format
- META.entityX: link to intent; link(s) to gedcom permanames
- IDENTITY.entityX: optional "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes; also any arbitrary XFNs to other permanames
- LICENSE.entityX: license for use of this person, copied from gedcom at import time, or from repo's LICENSE_DEFAULT at non-import-creation time
- commits on a person can easily be merged/fast-forwarded if history is shared and there are no textual conflicts
- commits on two persons of the same permaname that do NOT share history can undergo person merge
- merge commits set "supersedes" and "superseded-by" link attributes to allow post-merge traceability
- merge comes in at least 5 flavors:
  1) [import] full record reconciliation + history linkage at once (not recommended because intent is lost)
  2) [import] alternate record storage + history linkage (recommended for automated import processes)
  3) [post-import] "comes before/comes after" record replacement strategy for dealing with record reconciliation
  4) [post-import] "pick correct values" record reconciliation strategy for dealing with partial truth from multiple sources
  5) [post-import] "disambiguation" record reconciliation strategy for separating records that are NOT the same person (sets the "derived-from" attribute)
- merging of META takes a "most recent intent / union" approach
- merging of IDENTITY takes a "union with conflict detection & manual resolution" approach
- merging of LICENSE takes the more restrictive license by default

refs/local/persons/{permaname}:
- non-public person record, behaves like person in every other respect
- typically a person record should exist under EITHER refs/local OR refs/heads
- if both exist, the refs/heads record is used exclusively

refs/heads/families/{permaname}:
- entity1: the primary family in standard JSON form
- entityN: alternate, not-yet-merged family records
- entityX.{format}: the primary person (or an alternate) in an alternate format
- META.entityX: link to intent; link(s) to gedcom permanames
- IDENTITY.entityX: optional "prior-family", "derived-from", "supersedes", "superseded-by", "same-as", and "not-same-as" link attributes; also any arbitrary XFNs to other permanames
- LICENSE.entityX: license for use of this person, copied from gedcom at import time, or from repo's LICENSE_DEFAULT at non-import-creation time
- commits on a family can easily be merged/fast-forwarded if history is shared and there are no textual conflicts
- commits on two families of the same permaname that do NOT share history can undergo family merge
- merge comes in as many flavors as person merge (see person, draw corollaries for family)
- merging of META takes a "most recent intent / union" approach
- merging of IDENTITY takes a "union with conflict detection & manual resolution" approach
- merging of LICENSE takes the more restrictive license by default

refs/local/families/{permaname}:
- non-public family record, behaves like person in every other respect
- typically a family record should exist under EITHER refs/local OR refs/heads
- if both exist, the refs/heads record is used exclusively


